"use strict";(self.webpackChunkqtrobot_documentation=self.webpackChunkqtrobot_documentation||[]).push([[9120],{5322:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var s=t(5893),o=t(1151),r=t(9656);const a={id:"python_ros_sync_robot_behaviors",title:"Synchronizing QTrobot Behaviors",hide_table_of_contents:!0},i=void 0,l={id:"tutorials/python/python_ros_sync_robot_behaviors",title:"Synchronizing QTrobot Behaviors",description:"signalcellularalt &nbsp;Level:&nbsp; Intermediate",source:"@site/docs/tutorials/python/python_ros_sync_robot_behaviors.mdx",sourceDirName:"tutorials/python",slug:"/tutorials/python/python_ros_sync_robot_behaviors",permalink:"/docs/tutorials/python/python_ros_sync_robot_behaviors",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"python_ros_sync_robot_behaviors",title:"Synchronizing QTrobot Behaviors",hide_table_of_contents:!0},sidebar:"code_tutorials_sidebar",previous:{title:"Human hands detection",permalink:"/docs/tutorials/python/python_ros_hands"},next:{title:"Using QTrobot ReSpeaker microphone",permalink:"/docs/tutorials/python/python_ros_respeaker"}},c={},h=[{value:"Create a python project",id:"create-a-python-project",level:2},{value:"Synchronizer",id:"synchronizer",level:2},{value:"Main Code",id:"main-code",level:2},{value:"Explanation",id:"explanation",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.admonition,{title:"Overview",type:"info",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(r.Z,{children:"signal_cellular_alt"})," \xa0",(0,s.jsx)(n.strong,{children:"Level:"}),"\xa0 ",(0,s.jsx)(n.em,{children:"Intermediate"}),"\n",(0,s.jsx)("br",{})," ",(0,s.jsx)(r.Z,{children:" track_changes "})," \xa0",(0,s.jsx)(n.strong,{children:"Goal:"}),"\xa0 ",(0,s.jsx)(n.em,{children:"learn how to synchronize QTrobot behaviors/actions"}),"\n",(0,s.jsx)("br",{})," ",(0,s.jsx)(r.Z,{children:" task_alt "})," \xa0",(0,s.jsx)(n.strong,{children:"Requirements:"})]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\xa0\xa0",(0,s.jsx)(n.a,{href:"/docs/intro_code",children:"Quick start with coding on QTrobot"})]}),"\n",(0,s.jsxs)(n.li,{children:["\xa0\xa0",(0,s.jsx)(n.a,{href:"/docs/tutorials/python/python_ros_project",children:"Create a ROS python project"})]}),"\n",(0,s.jsxs)(n.li,{children:["\xa0\xa0",(0,s.jsx)(n.a,{href:"/docs/tutorials/python/python_ros_publish",children:"QTrobot interfaces using ROS Topics"})]}),"\n",(0,s.jsxs)(n.li,{children:["\xa0\xa0",(0,s.jsx)(n.a,{href:"/docs/tutorials/python/python_ros_subscribe",children:"QTrobot interfaces using ROS Subscribers"})]}),"\n"]})]}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial we will learn how to synchronize QTrobot behaviors or actions. We want to make QTrobot talk and do a gesture at the same time and wait for both of them to finish.\nThere are multiple ways how to do it.\nOne option is to use ROS Topics which are non-blocking and we would be able to execute both rostopics at the same time."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'talk_pub.publish("Hello! my name is QT!") #rostopic\ngesture_play.publish("QT/happy") #rostopic\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This will make QTrobot say ",(0,s.jsx)(n.strong,{children:'"Hello! my name is QT!"'})," and play a ",(0,s.jsx)(n.strong,{children:'"happy"'})," gesture at the same time. The issue is that we don't know how long it takes to finish and we can't wait for both of them finish. That means whatever is after ",(0,s.jsx)(n.strong,{children:'"gesture_play"'})," in the code, it will be executed without waiting for gesture_play/talk_pub to finish. This might work in certain situations, but for our use case we need to find something else."]}),"\n",(0,s.jsx)(n.p,{children:"The other option would be to use mix of ROS topics and services, because ROS services are blocking and will stop/block the execution of the program until that service call finishes.\nIn the same example above we could replace gesture play topic with a ros service call and the code would look like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"talk_pub.publish(\"Hello! my name is QT!\") #rostopic\ngesturePlay('QT/happy', 0) #rosservice\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this situation ",(0,s.jsx)(n.strong,{children:"talk_pub"})," and ",(0,s.jsx)(n.strong,{children:"gesturePlay"})," will execute at the same time, and the ",(0,s.jsx)(n.strong,{children:"gesturePlay"})," service call will block the execution of the program until it finishes playing the gesture. We come to an issue that, in this example, it doesn't matter how long or short the text is used for ",(0,s.jsx)(n.strong,{children:"talk_pub"}),", program will continue after the ",(0,s.jsx)(n.strong,{children:'"gesturePlay"'})," service is done."]}),"\n",(0,s.jsx)(n.p,{children:"This doesn't solve our task, in which we need to wait for both to finish. So let's implement a synchronizer for our actions/behaviors, in which we will execute both gesturePlay and talkText at the same time and wait for both of them to finish."}),"\n",(0,s.jsx)(n.h2,{id:"create-a-python-project",children:"Create a python project"}),"\n",(0,s.jsxs)(n.p,{children:["First we create a python project for our tutorial. let's call it ",(0,s.jsx)(n.code,{children:"tutorial_sync_qt_behaviors"})," and add the required python files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'cd ~/catkin_ws/src\ncatkin_create_pkg tutorial_sync_qt_behaviors std_msgs rospy roscpp -D "Synchronizing QTrobot Behaviors"\ncd tutorial_sync_qt_behaviors/src\ntouch tutorial_sync_qt_behaviors.py\ntouch synchronizer.py\nchmod +x tutorial_sync_qt_behaviors.py\n'})}),"\n",(0,s.jsx)(n.h2,{id:"synchronizer",children:"Synchronizer"}),"\n",(0,s.jsxs)(n.p,{children:["TaskSynchronizer is a simple class, using asyncio and threads, that enables us to run multiple tasks at the same time and wait for them to finish.\nOpen the ",(0,s.jsx)(n.code,{children:"synchronizer.py"})," file and add the following code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'import time\nimport asyncio\nimport concurrent.futures\n\nclass TaskSynchronizer():\n    """\n    A simple concurrent tasks synchornizer\n    """\n\n    def __init__(self, max_workers=5):\n        self.loop = asyncio.get_event_loop()\n        self.executor = concurrent.futures.ThreadPoolExecutor(\n            max_workers=max_workers)\n\n    def __worker(self, *args):\n        delay_exe = args[0][0]\n        func = args[0][1]\n        time.sleep(delay_exe)\n        return func()\n\n    async def __non_blocking(self, tasks):\n        fs = []\n        for task in tasks:\n            fs.append(self.loop.run_in_executor(\n                self.executor, self.__worker, task))\n        done, pending = await asyncio.wait(fs=fs, return_when=asyncio.ALL_COMPLETED)\n        results = [task.result() for task in done]\n        return results\n\n    def sync(self, tasks):\n        """\n        call this function with multiple tasks to run concurrently.\n        tasks is a list of (delay, lamda function) tuple. for exmaple:\n        tasks = [ (0, lambda: print("hello")), (3, lambda: print("world")), ...]\n        returns a list of each lamda function return value\n        """\n        results = self.loop.run_until_complete(self.__non_blocking(tasks))\n        return results\n'})}),"\n",(0,s.jsx)(n.h2,{id:"main-code",children:"Main Code"}),"\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:"tutorial_sync_qt_behaviors.py"})," file and add the following code and please check the ",(0,s.jsx)(n.a,{href:"/docs/tutorials/python/python_ros_sync_robot_behaviors#explanation",children:"explanation"})," below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/env python\nimport sys\nimport rospy\nfrom qt_robot_interface.srv import *\nfrom qt_gesture_controller.srv import *\nfrom synchronizer import TaskSynchronizer\n\nif __name__ == '__main__':\n    rospy.init_node('my_tutorial_node')\n    rospy.loginfo(\"my_tutorial_node started!\")\n\n   # define a ros service\n    talkText = rospy.ServiceProxy('/qt_robot/behavior/talkText', behavior_talk_text)\n    gesturePlay = rospy.ServiceProxy('/qt_robot/gesture/play', gesture_play)\n\n    # block/wait for ros service\n    rospy.wait_for_service('/qt_robot/behavior/talkText')\n    rospy.wait_for_service('/qt_robot/gesture/play')\n\n    # ceate an instance of TaskSynchronizer\n    ts = TaskSynchronizer()\n\n    # call talkText and gesturePlay at the same time\n    # wait until both finish their jobs\n    print('calling talkText and gesturePlay...')\n    results = ts.sync([\n        (0, lambda: talkText('Hello! my name is QT!')),\n        (0, lambda: gesturePlay('QT/happy', 0))\n    ])\n    print('talkText and gesturePlay finished.')\n"})}),"\n",(0,s.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsxs)(n.p,{children:["ROS Services are defined by srv files, which contains a request message and a response message. First we import all from ",(0,s.jsx)(n.code,{children:"qt_robot_interface.srv"})," and ",(0,s.jsx)(n.code,{children:"qt_gesture_controller.srv"}),". This will import all srv files that are under ",(0,s.jsx)(n.code,{children:"qt_robot_interface.srv"})," and ",(0,s.jsx)(n.code,{children:"qt_gesture_controller.srv"}),".\nIn this example we want to call talkText and gesturePaly services at the same time, so we need ",(0,s.jsx)(n.code,{children:"behavior_talk_text"})," and ",(0,s.jsx)(n.code,{children:"gesture_play"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Tip",type:"tip",children:[(0,s.jsx)(n.p,{children:"How do we know which service an interface uses? well, There is a useful command in ROS which tells you that:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Type: qt_robot_interface/behavior_talk_text\nArgs: message\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Next we import ",(0,s.jsx)(n.code,{children:"TaskSynchronizer"})," class from ",(0,s.jsx)(n.code,{children:"synchronizer"}),". This will allow as to create an instance of TaskSynchronizer and execute class function calls.\nIn the main, after we define ros services that we need, we create an instance of ",(0,s.jsx)(n.code,{children:"TaskSynchronizer"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# ceate an instance of TaskSynchronizer\nts = TaskSynchronizer()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We want to use ",(0,s.jsx)(n.code,{children:"sync"})," function from ",(0,s.jsx)(n.code,{children:"TaskSynchronizer"}),", to which we can pass multiple tasks that we want to run concurrently.\nWe provide an array of ",(0,s.jsx)(n.code,{children:"tasks"})," to the function, which are tuples of delay and lambda function.\nTask should look something like this:\n",(0,s.jsx)(n.code,{children:'(0, lambda: print("hello"))'})]}),"\n",(0,s.jsxs)(n.p,{children:["First parameter ",(0,s.jsx)(n.strong,{children:"delay"})," -> ",(0,s.jsx)(n.strong,{children:"0"}),", will tell synchronizer when to execute second parameter ",(0,s.jsx)(n.strong,{children:"lambda function"})," -> ",(0,s.jsx)(n.strong,{children:'lambda: print("hello")'}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Array of task would look like this example:\n",(0,s.jsx)(n.code,{children:" tasks = [ (0, lambda: Task1()), (0, lambda: Task2()), (0.6, lambda: Task3()), ...]"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://mermaid.live/edit#pako:eNpNjrtuwzAMRX9FINDNMCT5QUtz0albMxVaiFhJhVhyYNOAUyP_XjnJUE68h8QhNziOvQcLZ0rMLjnuif3HOEVise6Z1jC_8tunSyIXBx68OIToh5D8k7l0oPkilBWyEKqRMs4vpJ9I_kOVFa3MEHcGBUSf_aHPb2y7zQH_-Ogd2Nz2_kTLwA5cuudVWnj8uqUjWJ4WX8By3R9-D3SeKII90TBneqUEdoMVbIVlawy2dWdqVLIp4AZWKywRUaNstG7qTnX3An7HMQtk2Rk0XdWgUloaifph-34M95P3P0x1XKU",children:(0,s.jsx)(n.img,{src:"https://mermaid.ink/img/pako:eNpNjrtuwzAMRX9FINDNMCT5QUtz0albMxVaiFhJhVhyYNOAUyP_XjnJUE68h8QhNziOvQcLZ0rMLjnuif3HOEVise6Z1jC_8tunSyIXBx68OIToh5D8k7l0oPkilBWyEKqRMs4vpJ9I_kOVFa3MEHcGBUSf_aHPb2y7zQH_-Ogd2Nz2_kTLwA5cuudVWnj8uqUjWJ4WX8By3R9-D3SeKII90TBneqUEdoMVbIVlawy2dWdqVLIp4AZWKywRUaNstG7qTnX3An7HMQtk2Rk0XdWgUloaifph-34M95P3P0x1XKU?type=png",alt:""})})}),"\n",(0,s.jsxs)(n.p,{children:["As you can see above in the graph, Task1 and Task2 start at the same time, because they don't have any delay set and Task3 will be executed with 600ms of delay.\nNow when we now how ",(0,s.jsx)(n.code,{children:"sync"})," function works, we can implement talkText and gesturePlay service calls like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# call talkText and gesturePlay at the same time \n# wait until both finish their jobs\nresults = ts.sync([\n    (0, lambda: talkText('Hello! my name is QT!')),\n    (0, lambda: gesturePlay('QT/happy', 0))\n])\n"})}),"\n",(0,s.jsx)(n.p,{children:"If we wanted to execute gesturePlay a bit later then talkText, we could write something like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# call gesturePlay 0.5s (500ms) after talkText \n# wait until both finish their jobs\nresults = ts.sync([\n    (0, lambda: talkText('Hello! my name is QT!')),\n    (0.5, lambda: gesturePlay('QT/happy', 0))\n])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["As explained above ",(0,s.jsx)(n.code,{children:"sync"})," function waits (blocking) until all services finish their jobs and after that returns, so if we wanted to have two/three sets of actions/behaviors that QTrobot should execute, it might look something like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# calling first set\nresults = ts.sync([\n    (0, lambda: talkText('Hello! my name is QT!')),\n    (0, lambda: gesturePlay('QT/happy', 0))\n])\n# after first set executes it will call second set\nresults = ts.sync([\n    (0, lambda: talkText('It was nice meeting you!')),\n    (0, lambda: gesturePlay('QT/bye', 0))\n])\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In this example we just used ",(0,s.jsx)(n.strong,{children:"gesturePlay"})," and ",(0,s.jsx)(n.strong,{children:"talkText"}),", but you can use any other ros services which you want to synchronize."]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);