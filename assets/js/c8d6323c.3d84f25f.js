"use strict";(self.webpackChunkqtrobot_documentation=self.webpackChunkqtrobot_documentation||[]).push([[3330],{8155:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return k}});var n=a(87462),o=a(63366),r=(a(67294),a(3905)),i=a(18477),l=a(14702),p=["components"],c={id:"cpp_ros_project",title:"Create a ROS C++ project",hide_table_of_contents:!0},s=void 0,d={unversionedId:"tutorials/cpp/cpp_ros_project",id:"tutorials/cpp/cpp_ros_project",isDocsHomePage:!1,title:"Create a ROS C++ project",description:"signalcellularalt &nbsp;Level:&nbsp; Basic",source:"@site/docs/tutorials/cpp/cpp_ros_pkg.md",sourceDirName:"tutorials/cpp",slug:"/tutorials/cpp/cpp_ros_project",permalink:"/docs/tutorials/cpp/cpp_ros_project",tags:[],version:"current",frontMatter:{id:"cpp_ros_project",title:"Create a ROS C++ project",hide_table_of_contents:!0},sidebar:"code_tutorials_sidebar",previous:{title:"Controlling QTrobot arms using MoveIt",permalink:"/docs/tutorials/python/python_ros_moveit"},next:{title:"Using QTrobot interfaces",permalink:"/docs/tutorials/cpp/cpp_ros_interfaces"}},u=[{value:"What is catkin?",id:"what-is-catkin",children:[{value:"Structure of catkin workspace folder",id:"structure-of-catkin-workspace-folder",children:[],level:3}],level:2},{value:"Our first C++ project",id:"our-first-c-project",children:[{value:"Create project&#39;s structure",id:"create-projects-structure",children:[],level:3},{value:"Create C++ code file",id:"create-c-code-file",children:[],level:3},{value:"Update Cmake file",id:"update-cmake-file",children:[],level:3},{value:"Build and configure our C++ project",id:"build-and-configure-our-c-project",children:[],level:3},{value:"Run and check our C++ project",id:"run-and-check-our-c-project",children:[],level:3}],level:2},{value:"Adding parameters to our C++ project",id:"adding-parameters-to-our-c-project",children:[],level:2},{value:"Preparing ROS launch file",id:"preparing-ros-launch-file",children:[{value:"Running our C++ project using launch file",id:"running-our-c-project-using-launch-file",children:[],level:3},{value:"Setting parameters using launch file",id:"setting-parameters-using-launch-file",children:[],level:3}],level:2}],m={toc:u};function k(e){var t=e.components,a=(0,o.Z)(e,p);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Overview")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(i.Z,{mdxType:"Icon"},"signal_cellular_alt")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"},"\xa0**Level:**\xa0 *Basic*"),(0,r.kt)("br",null)," ",(0,r.kt)(i.Z,{mdxType:"Icon"}," track_changes ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"},"\xa0**Goal:**\xa0 *learn how to structure your C++ code using catkin package manager*"),(0,r.kt)("br",null)," ",(0,r.kt)(i.Z,{mdxType:"Icon"}," task_alt ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"},"\xa0**Requirements:**"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/intro_code"},"Quick start with coding on QTrobot")),(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/tutorials/intro_ros"},"Basic understanding of ROS framework")),(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0","Good knowledge of C++ and Cmake build system")))),(0,r.kt)("p",null,"This tutorial guides you towards creating and structuring your C++ code for QTrobot. You will learn, how to create a ROS package for your C++ code, how to build it and how to run your code using ",(0,r.kt)("inlineCode",{parentName:"p"},"rosrun")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"roslaunch"),". We will also show you how to configure your code using ROS parameters and launch file. "),(0,r.kt)("h2",{id:"what-is-catkin"},"What is catkin?"),(0,r.kt)("p",null,"Catkin is the official build system of ROS. In some simple words, catkin helps you to better structure you code, its dependencies within an isolated workspace known as catkin workspace (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"~/catkin_ws")," folder). Catkin offers different commands to create a ROS package, build and manage its dependencies.\nYou can ",(0,r.kt)("a",{parentName:"p",href:"http://wiki.ros.org/catkin/conceptual_overview"},"read more about catkin")," on official ROS website."),(0,r.kt)("h3",{id:"structure-of-catkin-workspace-folder"},"Structure of catkin workspace folder"),(0,r.kt)("p",null,"Catkin folder usually consists of ",(0,r.kt)("inlineCode",{parentName:"p"},"src"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"devel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," folder. The ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder is the place where the your codes are hosted. the ",(0,r.kt)("inlineCode",{parentName:"p"},"devel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," folder are automatically created and updated by catkin commands to configure and build your codes. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"~/catkin_ws\n    - src\n    - devel\n    - build\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Reminder")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Ensure that you have already read carefully the ",(0,r.kt)("a",{parentName:"li",href:"/docs/intro_code"},(0,r.kt)("strong",{parentName:"a"},(0,r.kt)("inlineCode",{parentName:"strong"},"Quick start guide")))," for coding and have your setup ready to follow this tutorial on QTPC. "),(0,r.kt)("li",{parentName:"ul"},"Both QTRP and QTPC has its own catkin folder which are located in the home folder: ",(0,r.kt)("inlineCode",{parentName:"li"},"~/catkin_ws"),"! We are running this tutorial (and the most following tutorials) on the QTPC. ")))),(0,r.kt)("h2",{id:"our-first-c-project"},"Our first C++ project"),(0,r.kt)("p",null,"In the following steps, we will create a package called ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial")," with the following information. Then step by step we fill it with our C++ code. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"package name"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"my_cpp_tutorial")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"package dependencies"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"std_msgs"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"roscpp")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"package description"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"My first C++ tutorial")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"package version"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"1.0.0")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"package author name"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"my name"))),(0,r.kt)("h3",{id:"create-projects-structure"},"Create project's structure"),(0,r.kt)("p",null,"Open a terminal on QTPC, switch to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/catkin_ws/src")," folder and run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'cd ~/catkin_ws/src\ncatkin_create_pkg my_cpp_tutorial std_msgs roscpp -D "My first C++ tutorial" -V "1.0.0" -a "my name"\n')),(0,r.kt)("p",null,"That creates a new package called ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder of our catkin workspace on QTPC:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Created file my_cpp_tutorial/package.xml\nCreated file my_cpp_tutorial/CMakeLists.txt\nCreated folder my_cpp_tutorial/include/my_tutorial\nCreated folder my_cpp_tutorial/src\nSuccessfully created files in /home/qtrobot/catkin_ws/src/my_cpp_tutorial. Please adjust the values in package.xml.\n")),(0,r.kt)("p",null,"You can open open the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.xml")," file and update its content such as description, version, authors name, emails etc. "),(0,r.kt)("h3",{id:"create-c-code-file"},"Create C++ code file"),(0,r.kt)("p",null,"The above command only creates an empty structure for our project. We need to add our C++ files by ourselves as follows:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cd my_cpp_tutorial/src\ntouch my_cpp_tutorial_node.cpp")),(0,r.kt)("p",null,"open the ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial_node.cpp")," file using your favorite editor",(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," and add the following content to it: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "ros/ros.h"\n\nint main(int argc, char **argv) {\n    ros::init(argc, argv, "my_cpp_tutorial_node");    \n    ROS_INFO_STREAM("my_cpp_tutorial_node is started");\n    ros::NodeHandle n;\n\n    ros::spin();    \n    return 0;\n}\n\n')),(0,r.kt)("p",null,"The above code simply starts a ROS node called ",(0,r.kt)("em",{parentName:"p"},"my_cpp_tutorial_node")," which does nothing until we press ",(0,r.kt)("inlineCode",{parentName:"p"},"<CTRL+C>")," to stop it.  "),(0,r.kt)("h3",{id:"update-cmake-file"},"Update Cmake file"),(0,r.kt)("p",null,"We also need to tell catkin to compile and build our C++ files. To do that, open ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial/CMakeLists.txt")," file and modify the following lines: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cmake"},"## Declare a C++ executable\n## With catkin_make all packages are built within a single CMake context\n## The recommended prefix ensures that target names across packages don't collide\nadd_executable(${PROJECT_NAME}_node src/my_cpp_tutorial_node.cpp)\n\n## Specify libraries to link a library or executable target against\ntarget_link_libraries(${PROJECT_NAME}_node\n  ${catkin_LIBRARIES}\n)\n")),(0,r.kt)("p",null,"We have simply uncommented few lines in the original Cmake file. The ",(0,r.kt)("inlineCode",{parentName:"p"},"add_executable(...")," tells cmake to compile our ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial_node.cpp")," within ",(0,r.kt)("inlineCode",{parentName:"p"},"src")," folder and the ",(0,r.kt)("inlineCode",{parentName:"p"},"target_link_libraries(...")," command tells cmake to build an executable called ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial_node"),"! "),(0,r.kt)("p",null,"You can ",(0,r.kt)("a",{parentName:"p",href:"https://cmake.org/cmake/help/latest/guide/tutorial/index.html"},"read more about Cmake build system")," on official Cmake website."),(0,r.kt)("h3",{id:"build-and-configure-our-c-project"},"Build and configure our C++ project"),(0,r.kt)("p",null,"Before adding an actual action to our C++ code, let's just first build and run it and check if everything is fine. To build a catkin package, we need to run ",(0,r.kt)("inlineCode",{parentName:"p"},"catkin_make")," command within catkin workspace."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"catkin_make")," command must be run within the top most level of catkin workspace, that is in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/catkin_ws")," and ",(0,r.kt)("strong",{parentName:"p"},"NOT")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/catkin_ws/src"),". "))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/catkin_ws\ncatkin_make\n")),(0,r.kt)("p",null,"the above command compiles and builds our ",(0,r.kt)("em",{parentName:"p"},"my_cpp_tutorial")," package along with other packages in catkin source directory. "),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To build a single package (e.g. ",(0,r.kt)("em",{parentName:"p"},"my_cpp_tutorial"),") from source directory, you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"catkin_make --pkg my_cpp_tutorial"),"! "))),(0,r.kt)("h3",{id:"run-and-check-our-c-project"},"Run and check our C++ project"),(0,r.kt)("p",null,"There are different way to run a C++ project in ROS. You can simply run the executable file from command line. However, the most standard way of running a C++ project in ROS is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"rosrun")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"roslaunch")," command. Let's start with ",(0,r.kt)("inlineCode",{parentName:"p"},"rosrun")," command. The interesting fact of these two commands is that you do not need to be in the same folder or use the absolute path to run your C++ executable. You can run it from anywhere on QTPC as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," rosrun my_cpp_tutorial my_cpp_tutorial_node\n")),(0,r.kt)("p",null,"the first parameter of ",(0,r.kt)("em",{parentName:"p"},"rosrun")," command is the name of our package and the second on is the name of our executable. That should creates a new ROS node called ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial_node")," in the ROS network. we can see it using ",(0,r.kt)("inlineCode",{parentName:"p"},"rosnode list")," command from another terminal: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{2}","{2}":!0},"/controller\n/my_cpp_tutorial_node       <---\n/qt_motor\n/qt_nuitrack_app\n/qt_robot_interface\n/qt_setting_interface\n/qt_vosk_app\n/rosapi\n/rosauth\n/rosbridge_websocket\n/rosout\n")),(0,r.kt)("p",null,"To stop the code, just press ",(0,r.kt)("inlineCode",{parentName:"p"},"<CTRL+C>")," in the same terminal where we run our code. "),(0,r.kt)("h2",{id:"adding-parameters-to-our-c-project"},"Adding parameters to our C++ project"),(0,r.kt)("p",null,"ROS framework offers parameter Server where strings, integers, floats, Booleans, lists and etc. can be stored as key-value objects. The parameter server can be accessed via command line and within all ROS supported programing languages such as our C++ code. We can also sets the parameters within our code.  Lets first modify our C++ code and add a line to read a parameters called ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include "ros/ros.h"\n\nint main(int argc, char **argv) {\n    ros::init(argc, argv, "my_cpp_tutorial_node");\n    ROS_INFO_STREAM("my_cpp_tutorial_node is started");\n    ros::NodeHandle n;\n\n    std::string param1;\n    n.param<std::string>("/my_cpp_tutorial_node/param1", param1, "default_value");\n    ROS_INFO_STREAM("value of param1 is "<< param1);\n\n    ros::spin();\n    return 0;\n}\n')),(0,r.kt)("p",null,"The above code looks for ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")," key within our node namespace ",(0,r.kt)("inlineCode",{parentName:"p"},"/my_cpp_tutorial_node/"),". Notice that, we already specified the node namespace name in our C++ code when we were initializing it: ",(0,r.kt)("inlineCode",{parentName:"p"},'ros::init(argc, argv, "my_cpp_tutorial_node");')),(0,r.kt)("p",null,"Since we have not set any value for ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")," in parameter server yet, the above code should print the ",(0,r.kt)("inlineCode",{parentName:"p"},"default_value"),"!  Now let's set a value for ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"rosparam")," command from command line. open a terminal and type: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'  rosparam set /my_cpp_tutorial_node/param1 "QT"\n')),(0,r.kt)("p",null,"This set a ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")," key specifically for our ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial_node"),'. Now if we rebuild and run our C++ code, it will get the value (i.e. "QT") of the ',(0,r.kt)("inlineCode",{parentName:"p"},"param1")," and print it out. You can ",(0,r.kt)("a",{parentName:"p",href:"http://wiki.ros.org/roscpp/Overview/Parameter%20Server"},"read more about rosparam in C++")," on official ROS website."),(0,r.kt)("h2",{id:"preparing-ros-launch-file"},"Preparing ROS launch file"),(0,r.kt)("p",null,"Launch files are very common in ROS. They provide a convenient way to start up multiple nodes, setting up parameters for nodes and etc. Let's create our first launch file.\nFirst we need to create the ",(0,r.kt)("inlineCode",{parentName:"p"},"launch")," folder within our C++ project folder. Catkin does not do this automatically. Then we need to create a launch file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/catkin_ws/src/my_cpp_tutorial\nmkdir launch\ncd launch\ntouch my_cpp_tutorial.launch\n")),(0,r.kt)("p",null,"now open ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial.launch")," and add the following content:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<launch>\n  <node name="my_cpp_tutorial_node" pkg="my_cpp_tutorial" type="my_cpp_tutorial_node" output="screen">\n  </node>\n</launch>\n\n')),(0,r.kt)("p",null,"This is the very basic setting of a ROS launch file. we just indicated that we would like to run one node which is located in ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial")," package. Within this package, we want to run our executable which is given as ",(0,r.kt)("inlineCode",{parentName:"p"},'type="my_cpp_tutorial_node"'),". The optional output parameter indicate where our code's log output should be printed. "),(0,r.kt)("h3",{id:"running-our-c-project-using-launch-file"},"Running our C++ project using launch file"),(0,r.kt)("p",null,"Now we have our launch file ready we can launch it from everywhere on QTPC using the ",(0,r.kt)("inlineCode",{parentName:"p"},"roslaunch")," command: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"roslaunch my_cpp_tutorial my_cpp_tutorial.launch\n")),(0,r.kt)("h3",{id:"setting-parameters-using-launch-file"},"Setting parameters using launch file"),(0,r.kt)("p",null,"Modify  ",(0,r.kt)("inlineCode",{parentName:"p"},"my_cpp_tutorial.launch")," file as follow to set a value for ",(0,r.kt)("inlineCode",{parentName:"p"},"param1")," key. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<launch>\n  <node name="my_cpp_tutorial_node" pkg="my_cpp_tutorial" type="my_cpp_tutorial_node" output="screen">\n    <param name="param1" value="QTrobot :)" />\n  </node>\n</launch>\n\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Congratulations! \ud83d\ude09")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You have just created your first C++ project in ROS. In the next tutorial, you will learn how to extend this tutorial to ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/cpp/cpp_ros_interfaces"},"access QTrobot interfaces"),". "))),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"you can simply use Ubuntu gedit text editor or install ",(0,r.kt)("a",{parentName:"li",href:"https://atom.io/"},"Atom")," or ",(0,r.kt)("a",{parentName:"li",href:"https://code.visualstudio.com/"},"Visual Studio Code")," whichever comes as your favorite.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}k.isMDXComponent=!0}}]);