"use strict";(self.webpackChunkqtrobot_documentation=self.webpackChunkqtrobot_documentation||[]).push([[9902],{75482:function(t,e,o){o.r(e),o.d(e,{frontMatter:function(){return d},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return u},default:function(){return h}});var a=o(87462),n=o(63366),r=(o(67294),o(3905)),i=o(18477),l=o(14702),s=["components"],d={id:"motors",title:"QTrobot Motion and Actuators",hide_table_of_contents:!1},m=void 0,p={unversionedId:"modules/motors",id:"modules/motors",isDocsHomePage:!1,title:"QTrobot Motion and Actuators",description:"QTrobot has  full internal metal structure and eight motors with metal gearbox. Thanks to its advanced compliance motor controllers, QTrobot has flexible joints with overload protection offering a robust platform for for intensive working hours. The smart motors also provide varieties of feedback including position, velocity and torque feedbacks. These powerful motors combined with QTrobot standard ROS motor controllers provide flexible infrastructure for wide varieties of applications",source:"@site/docs/modules/motors.md",sourceDirName:"modules",slug:"/modules/motors",permalink:"/docs/modules/motors",tags:[],version:"current",frontMatter:{id:"motors",title:"QTrobot Motion and Actuators",hide_table_of_contents:!1},sidebar:"modules",previous:{title:"QTrobot Vision and 3D Camera",permalink:"/docs/modules/camera"},next:{title:"QTrobot Computation and networking",permalink:"/docs/modules/processor"}},u=[{value:"Software Interface",id:"software-interface",children:[{value:"QTrobot joints configuration",id:"qtrobot-joints-configuration",children:[],level:3},{value:"Reading motors feedback",id:"reading-motors-feedback",children:[],level:3},{value:"Commanding motors",id:"commanding-motors",children:[],level:3}],level:2},{value:"QTrobot gesture controller",id:"qtrobot-gesture-controller",children:[{value:"What are QTrobot gesture files?",id:"what-are-qtrobot-gesture-files",children:[],level:3},{value:"How to record a new gesture?",id:"how-to-record-a-new-gesture",children:[{value:"Using QTrobot Educator app (recommended)",id:"using-qtrobot-educator-app-recommended",children:[],level:4},{value:"Using QTrobot <em>qt_gesutre</em> command line tool",id:"using-qtrobot-qt_gesutre-command-line-tool",children:[],level:4}],level:3},{value:"<strong>Tips</strong> for recording better gestures",id:"tips-for-recording-better-gestures",children:[],level:3}],level:2},{value:"QTrobot Inverse kinematic",id:"qtrobot-inverse-kinematic",children:[{value:"QTrobot URDF",id:"qtrobot-urdf",children:[],level:3},{value:"QTrobot motors standard vs. advanced setup",id:"standard_advanced",children:[],level:3},{value:"QTrobot&#39;s ikFast plugin and MoveIt",id:"qtrobots-ikfast-plugin-and-moveit",children:[],level:3}],level:2}],c={toc:u};function h(t){var e=t.components,d=(0,n.Z)(t,s);return(0,r.kt)("wrapper",(0,a.Z)({},c,d,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"QTrobot has  full internal metal structure and eight motors with metal gearbox. Thanks to its advanced compliance motor controllers, QTrobot has flexible joints with overload protection offering a robust platform for for intensive working hours. The smart motors also provide varieties of feedback including position, velocity and torque feedbacks. These powerful motors combined with QTrobot standard ROS motor controllers provide flexible infrastructure for wide varieties of applications: For examples recording and playing gestures, reading motors feedbacks and commanding motors in joint space or using QTrobot inverse kinematics to build more advanced application such as ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/python/python_ros_moveit"},"Hand writing"),".  Bellow you can find the kinematics chain and joints name of QTrobot:  "),(0,r.kt)("center",null,(0,r.kt)("img",{src:"/img/robot_kinematic.svg",alt:"display"})),(0,r.kt)("h2",{id:"software-interface"},"Software Interface"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"qt_motor")," is the main software interface for QTrobot actuators. Its implementation follows ",(0,r.kt)("a",{parentName:"p",href:"http://wiki.ros.org/ros_control"},(0,r.kt)("strong",{parentName:"a"},"ros_control"))," paradigm and provides standard ROS interfaces for joint command, joint state, joint trajectory and etc. Beside supporting the relevant standard ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ros-controls/ros_controllers/tree/melodic-devel"},(0,r.kt)("strong",{parentName:"a"},"ros_controllers")),", ",(0,r.kt)("inlineCode",{parentName:"p"},"qt_motor")," also implements other custom controllers such as ",(0,r.kt)("inlineCode",{parentName:"p"},"QTGestureController")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"QTMotorsController")," via dedicated plugins. The following diagram depicts the architecture of QTrobot motor interfaces: "),(0,r.kt)("td",null,(0,r.kt)("center",null,(0,r.kt)("img",{src:"/img/qt_motor.svg",width:"80%",alt:"motor"}))),(0,r.kt)("br",null),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"qt_motor")," is running on QTRP during the startup of the robot. Similar to other QTrobot software interfaces, it is an standard ROS node. You can find its configuration files in the node default config path. (e.g. using ",(0,r.kt)("inlineCode",{parentName:"p"},"$ roscd qt_motor/config"),"). Below is a summary explanation of each of QTrobot motors  configuration files: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"qtrobot-hardware.yaml"),":  contains low-level motor configurations such as PID value, calibration, main control loop frequency, etc. "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"qtrobot-hardware-extra.yaml"),": contains overwritten parameters for Advanced setup (see ",(0,r.kt)("a",{parentName:"li",href:"#standard_advanced"},"standard vs. advanced"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"qtrobot-controller.yaml"),": contains list and parameters of the controllers"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"qtrobot-controller-extra.yaml"),": contains list and parameters of the extra controllers for Advanced setup (see ",(0,r.kt)("a",{parentName:"li",href:"#standard_advanced"},"standard vs. advanced"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"kinematics.yaml"),": contains some parameters for IKFastKinematicsPlugin solver for left and right arms ")),(0,r.kt)("h3",{id:"qtrobot-joints-configuration"},"QTrobot joints configuration"),(0,r.kt)("p",null,"QTrobot joints are group in three parts: head, right_arm and left_arm.  The movement of each joints is limited in software and configured in ",(0,r.kt)("em",{parentName:"p"},"qtrobot-hardware.yaml")," along with the applied calibration value using automated motor calibration procedure. Therefore, the value of the joint limits appear in the configuration file may be different from the actual value because they also take the calibration value of each motor into account.  QTrobot motor control does not use ROS ",(0,r.kt)("a",{parentName:"p",href:"http://wiki.ros.org/joint_limits_interface"},"joint_limits_interface")," (although one can confgiure and enable it) because the joint limits are set in each motor embedded controller at the startup time.  Here are the joint limit values of each joint: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"head")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HeadYaw")," ","[min: -90.0, max: 90]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HeadPitch")," ","[min: -15.0,  max: 25]"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"right_arm")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RightShoulderPitch")," ","[min: -140.0, max: 140.0]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RightShoulderRoll")," ","[min: -75.0, max: 7.0]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RightElbowRoll")," ","[min: -90.0, max: -7.0]")))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"left_arm"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LeftShoulderPitch")," ","[min: -140.0, max: 140.0]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LeftShoulderRoll")," ","[min: -75.0, max: 7.0]"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"LeftElbowRoll")," ","[min: -90.0, max: -7.0]")))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"  Please notice that, the joint limit is different from collision control and this does not mean that the QTrobot has self collision awareness when moving its parts! The embedded controller of each motor ensure that each joint separately does not exceed the limit. However the overall generated trajectory may collide other robot's parts.   "))),(0,r.kt)("h3",{id:"reading-motors-feedback"},"Reading motors feedback"),(0,r.kt)("p",null,"QTrobot uses standard ROS ",(0,r.kt)("inlineCode",{parentName:"p"},"JointStateController")," and publishes motor feedbacks such as position, velocity and effort values on ",(0,r.kt)("inlineCode",{parentName:"p"},"/qt_robot/joints/state"),". To access these values, you can simply subscribe to this topic. Here is an example of reading joints state values from command line: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rostopic echo /qt_robot/joints/state\n\n---\nheader:\n  seq: 1911781\n  stamp:\n    secs: 1634639561\n    nsecs: 334769943\n  frame_id: ''\nname: [HeadPitch, HeadYaw, LeftElbowRoll, LeftShoulderPitch, LeftShoulderRoll, RightElbowRoll,\n  RightShoulderPitch, RightShoulderRoll]\nposition: [0.8999999761581421, -43.29999923706055, -16.899999618530273, 89.30000305175781, -76.19999694824219, -22.100000381469727, -88.9000015258789, -80.5]\nvelocity: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\neffort: [-113.0, -75.0, 12.0, -13.0, 37.0, -13.0, 0.0, 12.0]\n")),(0,r.kt)("p",null,"To learn more about motors and  reading feedback from code, you can follow our Python ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/python/python_ros_motors"},(0,r.kt)("strong",{parentName:"a"},"QTrobot motors tutorial")),". "),(0,r.kt)("h3",{id:"commanding-motors"},"Commanding motors"),(0,r.kt)("p",null,"QTrobot motors are grouped in different parts as it's described in joint configuration. To commands a motor in a joint space, you need to use the interface for the corresponding part which is of the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Publishing to ",(0,r.kt)("inlineCode",{parentName:"li"},"/qt_robot/head_position/command")," topic for head motors"),(0,r.kt)("li",{parentName:"ul"},"Publishing to ",(0,r.kt)("inlineCode",{parentName:"li"},"/qt_robot/left_arm_position/command")," topic for left arm motors"),(0,r.kt)("li",{parentName:"ul"},"Publishing to ",(0,r.kt)("inlineCode",{parentName:"li"},"/qt_robot/right_arm_position/command")," topic for right arm motors")),(0,r.kt)("p",null,"For example to move robot's ",(0,r.kt)("inlineCode",{parentName:"p"},"HeadYaw")," joint to looks ",(0,r.kt)("inlineCode",{parentName:"p"},"45\xb0")," degree to its left side, you can try the following command from terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rostopic pub /qt_robot/head_position/command std_msgs/Float64MultiArray \"layout:\n  dim:\n  - label: ''\n    size: 0\n    stride: 0\n  data_offset: 0\ndata: [45, 0]\"\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"TIPS")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"to easier write the ROS publishing command in a terminal, start writing your command (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"ros pub /qt_robot/"),") and press ",(0,r.kt)("inlineCode",{parentName:"li"},"TAB")," few times to autocomplete the command. "),(0,r.kt)("li",{parentName:"ul"},"You can ",(0,r.kt)("em",{parentName:"li"},"not")," send command to only one joint! in the above example we are actually sending ",(0,r.kt)("inlineCode",{parentName:"li"},"0\xb0")," command to the ",(0,r.kt)("inlineCode",{parentName:"li"},"HeadPitch")," too."),(0,r.kt)("li",{parentName:"ul"},"Data array is defined as chain of motors (e.g. left arm => data: ",(0,r.kt)("inlineCode",{parentName:"li"},"[<LeftShoulderPitch>,<LeftShoulderRoll>,<LeftElbowRoll>]"),")")))),(0,r.kt)("p",null,"To learn more about commanding motors you can follow our Python ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/python/python_ros_motors"},(0,r.kt)("strong",{parentName:"a"},"QTrobot motors tutorial")),". "),(0,r.kt)("h2",{id:"qtrobot-gesture-controller"},"QTrobot gesture controller"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"QTGestureController")," plugin provides ROS interfaces to manage QTrobot body gestures such as listing, playing and recording gestures. QTrobot comes with some pre-recorded gestures, which are located and categorized in QTRP under ",(0,r.kt)("inlineCode",{parentName:"p"},"~/robot/data/gestures/")," folder. However one can easily record a new gesture by simply activating and moving robot parts (head, right arm and left arm). You can play any gesture using one of the following methods: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("a",{parentName:"li",href:"/docs/intro_graphical"},(0,r.kt)("strong",{parentName:"a"},"Educator tablet"))," app"),(0,r.kt)("li",{parentName:"ul"},"Publishing to ",(0,r.kt)("inlineCode",{parentName:"li"},"/qt_robot/gesture/play")," topic "),(0,r.kt)("li",{parentName:"ul"},"Calling ",(0,r.kt)("inlineCode",{parentName:"li"},"/qt_robot/gesture/play")," service ")),(0,r.kt)("p",null,"For example, you can open a terminal (on QTPC) and try the following command to play the ",(0,r.kt)("em",{parentName:"p"},"happy")," gesture"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"rostopic pub /qt_robot/gesture/play std_msgs/String \"data: 'QT/happy'\"\n")),(0,r.kt)("p",null,"QTrobot gestures may contains all parts or can be recorded using only one part (e.g. ",(0,r.kt)("em",{parentName:"p"},"head"),"). However for the time being, you cannot play two gestures concurrently. The gesture controller does not accept other requests for playing new gesture when it is already busy playing another gesture!  "),(0,r.kt)("h3",{id:"what-are-qtrobot-gesture-files"},"What are QTrobot gesture files?"),(0,r.kt)("p",null,"The QTrobot gestures contain robots joints position's waypoints and their corresponding timestamps. The joint positions are recorded in 20Hrz and formatted in XML file (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"QT/bye.xml"),") with some other information such as duration of the gesture and the robot parts which are involved in playing the gesture. After recording, the gesture file can be manually post processed (if required), for example, to remove the trailing delay by simply delete the unnecessary waypoints from the file. Bellow is an example of QTrobot gesture file: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8" standalone="yes" ?>\n<gesture>\n    <name>QT/bye</name>\n    <parts>\n        <part>right_arm</part>\n    </parts>\n    <duration>5.54</duration>\n    <waypoints count="97">\n        <point time="1558971402671926152">\n            <RightElbowRoll>-31.90</RightElbowRoll>\n            <RightShoulderPitch>-88.60</RightShoulderPitch>\n            <RightShoulderRoll>-59.30</RightShoulderRoll>\n        </point>\n        <point time="1558971402704626777">\n            <RightElbowRoll>-30.60</RightElbowRoll>\n            <RightShoulderPitch>-88.60</RightShoulderPitch>\n            <RightShoulderRoll>-60.60</RightShoulderRoll>\n        </point>\n...\n')),(0,r.kt)("h3",{id:"how-to-record-a-new-gesture"},"How to record a new gesture?"),(0,r.kt)("p",null,"Recoding a gesture is done by moving the robot parts by hands and store the joint positions. This involve the following generic procedures: "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"putting the desired motors in the idle mode (release the stiffness of the motors)"),(0,r.kt)("li",{parentName:"ol"},"moving the motors by taking the corresponding parts (e.g. right_arm) in your hand and to generate desired gesture"),(0,r.kt)("li",{parentName:"ol"},"store the motor's position waypoints and reactive the motors stiffness ")),(0,r.kt)("p",null,"To record a gesture, you can use one of the following tools: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("a",{parentName:"li",href:"/docs/intro_graphical"},(0,r.kt)("strong",{parentName:"a"},"Educator tablet"))," app"),(0,r.kt)("li",{parentName:"ul"},"Using ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/luxai-qtrobot/software/tree/master/tools/qt_gesture_tool"},(0,r.kt)("strong",{parentName:"a"},"qt_gesutre command line tool"))," "),(0,r.kt)("li",{parentName:"ul"},"Manually using ",(0,r.kt)("inlineCode",{parentName:"li"},"QTGestureController")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"QTMotorsController")," service calls ")),(0,r.kt)("h4",{id:"using-qtrobot-educator-app-recommended"},"Using QTrobot Educator app (recommended)"),(0,r.kt)("p",null,"Indeed the easiest and quickest way to record a gesture is to use QTrobot Educator tablet app.  You can follow our ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/graphical/studio_gesture"},"Record a new gesture using tablet")," tutorial to see how easily you can record a new gesture. "),(0,r.kt)("h4",{id:"using-qtrobot-qt_gesutre-command-line-tool"},"Using QTrobot ",(0,r.kt)("em",{parentName:"h4"},"qt_gesutre")," command line tool"),(0,r.kt)("p",null,"By default the ",(0,r.kt)("inlineCode",{parentName:"p"},"qt_gesture.py")," script should be installed on QTRP under ",(0,r.kt)("inlineCode",{parentName:"p"},"~/robot/code/software/tools/qt_gesture_tool"),". Anyway, if you cannot find it, just simply update the ",(0,r.kt)("inlineCode",{parentName:"p"},"software")," repo using ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull"),".\nFor example to record a gesture using QTrobot's  ",(0,r.kt)("em",{parentName:"p"},"right arm"),", follow these steps: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"run the ",(0,r.kt)("inlineCode",{parentName:"li"},"qt_gesture.py")," command with the name of your gesture (e.g. mygesture) and give the ",(0,r.kt)("inlineCode",{parentName:"li"},'"right_arm"')," as the part list: ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},' ~/robot/code/software/tools/qt_gesture_tool/qt_gesture.py record mygesture "right_arm"\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"press enter to START recording."),(0,r.kt)("li",{parentName:"ul"},"you will notice that robot's right arm is loose. take the arm and move it around to generate your desired gesture. "),(0,r.kt)("li",{parentName:"ul"},"when it's done, press enter again to STOP recording")),(0,r.kt)("p",null,"Your gesture should be stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/robot/data/gestures/mygesture.xml"),". You can play and test your gesture. "),(0,r.kt)("h3",{id:"tips-for-recording-better-gestures"},(0,r.kt)("strong",{parentName:"h3"},"Tips")," for recording better gestures"),(0,r.kt)("p",null,"For generate and record safer and smoother gestures, please pay attention to the following tips carefully: "),(0,r.kt)(i.Z,{mdxType:"Icon"}," lightbulb ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"}," When recording a gesture, **never** hit the robot parts to each other or to the QTrobot's body.  "),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(i.Z,{mdxType:"Icon"}," lightbulb ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"}," Do **not move** the arms or head so fast and avoid sharp and shaky movements. Move it naturally and smoothly. Due to safety feature implemented in the gesture controller, the fast movement will be slow down automatically and you would not get a desired gesture.  "),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(i.Z,{mdxType:"Icon"}," lightbulb ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"}," Do **not move** the robot head so fast up and down. This may apply excessive force to the neck motor joints when playing the gesture!  "),(0,r.kt)("br",null),(0,r.kt)("br",null),(0,r.kt)(i.Z,{mdxType:"Icon"}," lightbulb ")," ",(0,r.kt)(l.Z,{mdxType:"Markdown"}," It is always easier to record gestures using an assistant: one person to control the Tablet app/command line tool and the other person move the robot parts."),(0,r.kt)("h2",{id:"qtrobot-inverse-kinematic"},"QTrobot Inverse kinematic"),(0,r.kt)("p",null,"QTrobot parts can be controlled in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cartesian_coordinate_robot"},"cartesian space")," from example using ",(0,r.kt)("a",{parentName:"p",href:"https://moveit.ros.org/"},"MoveIT Motion Planning Framework"),". Generally, in cartesian space, you do not command each joints seperately, instead you ask robot to move its end efecctor (for example right hand) to a desired position in cartesian coordinate using X, Y and Z position with respect to a reference point. To do this you need some more knowledge and setup which are covered in the following sections. "),(0,r.kt)("h3",{id:"qtrobot-urdf"},"QTrobot URDF"),(0,r.kt)("p",null,"The URDF (Universal Robot Description Format) model is a file or collection of files that describe a robot's physical description such as the motors mechanical position and orientation, the links between motors and etc. The URDF file can be used for visualization of the robot, calculating the inverse kinematics or motion planning in ROS.\nFollowing is a description and simple visualization of QTrobot's URDF: "),(0,r.kt)("center",null,(0,r.kt)("img",{src:"/img/urdf.png",width:"80%",alt:"display"})),(0,r.kt)("br",null),(0,r.kt)("p",null,"You can find the QTrobot URDF files using the following links: ",(0,r.kt)("a",{target:"_blank",href:o(14737).Z},(0,r.kt)("strong",null,"qtrobot.pdf"))," and ",(0,r.kt)("a",{target:"_blank",href:o(3691).Z},(0,r.kt)("strong",null,"qtrobot_urdf.zip")),". To visualize the URDF model, you can use ROS ",(0,r.kt)("inlineCode",{parentName:"p"},"urdf_tutorial")," on QTPC using the following command: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"roslaunch urdf_tutorial display.launch model:=qtrobot.urdf\n")),(0,r.kt)("h3",{id:"standard_advanced"},"QTrobot motors standard vs. advanced setup"),(0,r.kt)("p",null,"QTrobot provides two different setups (standard and advanced) which can be configured depending on the use cases and applications. The default setup is ",(0,r.kt)("strong",{parentName:"p"},"standard")," which provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"JointGroupPositionController")," to command motors using joint position commands. On the contrary the ",(0,r.kt)("strong",{parentName:"p"},"advanced")," setup is intended for applications which require more advanced motor controls using inverse kinematic, ",(0,r.kt)("a",{parentName:"p",href:"https://moveit.ros.org/"},"MoveIT Motion Planning Framework"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"JointTrajectoryController")," and etc. Bellow is a summary of the configuration of each setup: "),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null},"Position unit"),(0,r.kt)("th",{parentName:"tr",align:null},"Control loop frequency"),(0,r.kt)("th",{parentName:"tr",align:null},"Controllers and interfaces"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Standard")),(0,r.kt)("td",{parentName:"tr",align:null},"degree"),(0,r.kt)("td",{parentName:"tr",align:null},"2Hrz"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"QTGestureController"),(0,r.kt)("li",null,"QTMotorsController"),(0,r.kt)("li",null,"JointStateController"),(0,r.kt)("li",null,"JointGroupPositionController")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Advanced")),(0,r.kt)("td",{parentName:"tr",align:null},"radian"),(0,r.kt)("td",{parentName:"tr",align:null},"30Hrz"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("ul",null,(0,r.kt)("li",null,"QTGestureController"),(0,r.kt)("li",null,"QTMotorsController"),(0,r.kt)("li",null,"JointStateController"),(0,r.kt)("li",null,"JointTrajectoryController")," ",(0,r.kt)("li",null,"robot_state_publisher")))))),(0,r.kt)("p",null,"For most of the human-robot-interaction applications, the standard setup should be more than enough unless you want to use inverse kinematic in your scenario similar to our ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/python/python_ros_moveit"},(0,r.kt)("strong",{parentName:"a"},"QTrobot hand writing tutorial")),".  In this case, ",(0,r.kt)("strong",{parentName:"p"},"to enable the advanced setup"),", "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"simply open ",(0,r.kt)("inlineCode",{parentName:"li"},"~/robot/autostart/start_qt_motor.sh")," on QTRP"),(0,r.kt)("li",{parentName:"ol"},"change the line regarding launching qt_motor as follows: ",(0,r.kt)("inlineCode",{parentName:"li"},"roslaunch qt_motor qt_motor_advanced.launch")),(0,r.kt)("li",{parentName:"ol"},"restart the QTrobot ")),(0,r.kt)("h3",{id:"qtrobots-ikfast-plugin-and-moveit"},"QTrobot's ikFast plugin and MoveIt"),(0,r.kt)("p",null,"We have already created the inverse kinematic solver of QTrobot's left and right arm using ",(0,r.kt)("a",{parentName:"p",href:"http://docs.ros.org/en/kinetic/api/moveit_tutorials/html/doc/ikfast/ikfast_tutorial.html"},"IKFast Kinematics Solver"),". You can find these plugins in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/robot/code/software")," folder on QTRP and QTPC or get them from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/luxai-qtrobot/software/tree/master/plugins"},(0,r.kt)("strong",{parentName:"a"},"QTrobot github software"))," repository. Perhaps the easiest way to learn how to use the MoveIt framework wit QTrobot is to to follow our ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/python/python_ros_moveit"},(0,r.kt)("strong",{parentName:"a"},"QTrobot hand writing tutorial")),". In this tutorial you will see :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"how to prepare the setup for MoveIT"),(0,r.kt)("li",{parentName:"ul"},"how to visualize the robot's state in ROS Rviz"),(0,r.kt)("li",{parentName:"ul"},"How to use ",(0,r.kt)("inlineCode",{parentName:"li"},"moveit_ros_move_group")," for motion planning "),(0,r.kt)("li",{parentName:"ul"},"How to use QTrobot's right arm for hand writing"),(0,r.kt)("li",{parentName:"ul"},"How to ask QTrobot to draw shapes created in SVG file")),(0,r.kt)("p",null,"Take a look at QTrobot hand writing demo in action: "),(0,r.kt)("center",null,(0,r.kt)("iframe",{width:"415",height:"240",src:"https://www.youtube.com/embed/JVJMZNkcl6M",frameborder:"0",allow:"accelerometer; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0})))}h.isMDXComponent=!0},14737:function(t,e,o){e.Z=o.p+"assets/files/qtrobot-59f4cade809305cfa1de30b10b386155.pdf"},3691:function(t,e,o){e.Z=o.p+"assets/files/qtrobot_urdf-a2cc02eb9860aedd09d55af45c747154.zip"}}]);