"use strict";(self.webpackChunkqtrobot_documentation=self.webpackChunkqtrobot_documentation||[]).push([[4791],{87558:function(t,e,o){o.r(e),o.d(e,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return m},assets:function(){return h},toc:function(){return _},default:function(){return u}});var n=o(87462),a=o(63366),r=(o(67294),o(3905)),i=o(55381),s=o(14702),l=["components"],p={id:"python_ros_motors",title:"Commanding QTrobot motors",hide_table_of_contents:!0},d="Commanding QTrobot motors",m={unversionedId:"tutorials/python/python_ros_motors",id:"tutorials/python/python_ros_motors",title:"Commanding QTrobot motors",description:"signalcellularalt &nbsp;Level:&nbsp; Intermediate",source:"@site/docs/tutorials/python/python_ros_motors.md",sourceDirName:"tutorials/python",slug:"/tutorials/python/python_ros_motors",permalink:"/docs/tutorials/python/python_ros_motors",tags:[],version:"current",frontMatter:{id:"python_ros_motors",title:"Commanding QTrobot motors",hide_table_of_contents:!0},sidebar:"code_tutorials_sidebar",previous:{title:"QTrobot recording new gesture",permalink:"/docs/tutorials/python/python_ros_record"},next:{title:"Human facial expression detection",permalink:"/docs/tutorials/python/python_ros_expression"}},h={},_=[{value:"Create a python project",id:"create-a-python-project",level:2},{value:"Code",id:"code",level:2},{value:"Explanation",id:"explanation",level:2}],c={toc:_};function u(t){var e=t.components,o=(0,a.Z)(t,l);return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"commanding-qtrobot-motors"},"Commanding QTrobot motors"),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Overview")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(i.Z,{mdxType:"Icon"},"signal_cellular_alt")," ",(0,r.kt)(s.Z,{mdxType:"Markdown"},"\xa0**Level:**\xa0 *Intermediate*"),(0,r.kt)("br",null)," ",(0,r.kt)(i.Z,{mdxType:"Icon"}," track_changes ")," ",(0,r.kt)(s.Z,{mdxType:"Markdown"},"\xa0**Goal:**\xa0 *learn how to command and read motors with QTrobot Motor interface*"),(0,r.kt)("br",null)," ",(0,r.kt)(i.Z,{mdxType:"Icon"}," task_alt ")," ",(0,r.kt)(s.Z,{mdxType:"Markdown"},"\xa0**Requirements:**"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/intro_code"},"Quick start with coding on QTrobot")),(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/tutorials/python/python_ros_project"},"Create a ROS python project")),(0,r.kt)("li",{parentName:"ul"},"\xa0","\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/tutorials/python/python_ros_publish"},"QTrobot interfaces using ROS Topics"))))),(0,r.kt)("p",null,"In this tutorial you will learn how to command and read motors with ",(0,r.kt)("a",{parentName:"p",href:"/docs/api_ros#motor-interface"},"QTrobot Motor interface")," using python."),(0,r.kt)("h2",{id:"create-a-python-project"},"Create a python project"),(0,r.kt)("p",null,"First we create a python project for our tutorial. let's call it ",(0,r.kt)("inlineCode",{parentName:"p"},"tutorial_qt_motors")," and add the required python file: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cd ~/catkin_ws/src\ncatkin_create_pkg tutorial_qt_motors sensor_msgs std_msgs rospy roscpp -D "Command QTrobot motors"\ncd tutorial_qt_motors/src\ntouch tutorial_qt_motors_node.py\nchmod +x tutorial_qt_motors_node.py\n')),(0,r.kt)("h2",{id:"code"},"Code"),(0,r.kt)("p",null,'In this tutorial we will focus on reading and moving just one motor "HeadYaw".\nOpen the ',(0,r.kt)("inlineCode",{parentName:"p"},"tutorial_qt_motors_node.py")," file and the add the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/env python\nimport sys\nimport rospy\nfrom std_msgs.msg import Float64MultiArray\nfrom sensor_msgs.msg import JointState\n\nhead_yaw_pos = 0\nrospy.init_node('my_tutorial_node')\nrospy.loginfo(\"my_tutorial_node started!\")\n\nhead_pub = rospy.Publisher('/qt_robot/head_position/command', Float64MultiArray, queue_size=10)\nrospy.sleep(3.0)\n\ndef state_callback(msg):\n    global head_yaw_pos\n    head_yaw_pos = msg.position[msg.name.index(\"HeadYaw\")]\n\nrospy.Subscriber('/qt_robot/joints/state', JointState, state_callback)\n\nif __name__ == '__main__':\n    head_yaw_ref = 15.0\n    while not rospy.is_shutdown():\n        try:\n            href = Float64MultiArray()\n            href.data = [head_yaw_ref, 0]\n            head_pub.publish(href)\n            rospy.sleep(4)\n            rospy.loginfo(\"Current position : %.2f\" ,head_yaw_pos)\n            head_yaw_ref = -15 if head_yaw_ref == 15 else 15\n        except KeyboardInterrupt:\n            pass\n    rospy.loginfo(\"finsihed!\")\n")),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"First we imported ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64MultiArray")," from ROS standard message library. This message is used in ",(0,r.kt)("inlineCode",{parentName:"p"},"/qt_robot/head_position/command")," to command the motors. Next we imported ",(0,r.kt)("inlineCode",{parentName:"p"},"JointState"),", which we will need to read the joint positions. We define one global variable to save latest position of motor and we initialize ROS node. "),(0,r.kt)("p",null,"We define a ROS publisher for ",(0,r.kt)("inlineCode",{parentName:"p"},"/qt_robot/head_position/command"),", which we will use to command the motors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"head_pub = rospy.Publisher('/qt_robot/head_position/command', Float64MultiArray, queue_size=10)\n")),(0,r.kt)("p",null,"Next we define a callback function ",(0,r.kt)("inlineCode",{parentName:"p"},"state_callback"),', which will be reading position of "HeadYaw" motor. With that we also define a ROS subscriber ',(0,r.kt)("inlineCode",{parentName:"p"},"/qt_robot/joints/state")," to read this data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def state_callback(msg):\n    global head_yaw_pos\n    head_yaw_pos = msg.position[msg.name.index(\"HeadYaw\")]\n\nrospy.Subscriber('/qt_robot/joints/state', JointState, state_callback)\n")),(0,r.kt)("p",null,"In the main we define starting reference position and new ",(0,r.kt)("inlineCode",{parentName:"p"},"Float64MultiArray")," message, which includes reference position. We publish new position with ",(0,r.kt)("inlineCode",{parentName:"p"},"head_pub"),' and after some delay we print the current position and we change the reference position. The "HeadYaw" will move from 15 to -15 on repeat.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'if __name__ == \'__main__\':\n    while not rospy.is_shutdown():\n        try:\n            href = Float64MultiArray()\n            href.data = [head_yaw_ref, 0]\n            head_pub.publish(href)\n            rospy.sleep(4)\n            rospy.loginfo("Current position : %.2f" ,head_yaw_pos)\n            head_yaw_ref = -15 if head_yaw_ref == 15 else 15\n        except KeyboardInterrupt:\n            pass\n    rospy.loginfo("finsihed!")\n')))}u.isMDXComponent=!0}}]);