(self.webpackChunkqtrobot_documentation=self.webpackChunkqtrobot_documentation||[]).push([[573],{36463:function(t,e,o){"use strict";o.r(e),o.d(e,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},assets:function(){return u},toc:function(){return d},default:function(){return m}});var r=o(87462),n=o(63366),a=(o(67294),o(3905)),s=o(93456),i=(o(14702),["components"]),l={id:"processor",title:"QTrobot Computation and networking",hide_table_of_contents:!1},p=void 0,c={unversionedId:"modules/processor",id:"modules/processor",title:"QTrobot Computation and networking",description:"QTrobot comes with two computers: i) QTRP, a Raspberry Pi based computer to control the main hardware and ii) QTPC, an Intel\xae NUC i5/i7 PC to provide more computational power and to accelerate software development cycle. Both computers run on Ubuntu/Debian Linux operating systems and leverage ROS to offer easy-to-use yet very flexible software architecture. QTrobot's hardware is easily extendable via USB-C and USB adaptors, for example, to connect external monitor, keyboard and mouse and sensors.",source:"@site/docs/modules/processor.md",sourceDirName:"modules",slug:"/modules/processor",permalink:"/docs/modules/processor",tags:[],version:"current",frontMatter:{id:"processor",title:"QTrobot Computation and networking",hide_table_of_contents:!1},sidebar:"modules",previous:{title:"QTrobot Motion and Actuators",permalink:"/docs/modules/motors"}},u={},d=[{value:"Operating systems",id:"operating-systems",level:2},{value:"Networking",id:"networking",level:2},{value:"How to connect QTrobot to the internet",id:"how-to-connect-qtrobot-to-the-internet",level:3},{value:"How to enable QTrobot&#39;s hotspot",id:"how-to-enable-qtrobots-hotspot",level:3},{value:"ROS setup",id:"ros-setup",level:2},{value:"Catkin workspace",id:"catkin-workspace",level:3},{value:"QTrobot startup process",id:"qtrobot-startup-process",level:2},{value:"What are autostart scripts?",id:"what-are-autostart-scripts",level:3},{value:"QTPC autostart scripts",id:"qtpc-autostart-scripts",level:3},{value:"How to check the log files of autostart scripts",id:"how-to-check-the-log-files-of-autostart-scripts",level:3},{value:"How to run my own script at startup on QTPC",id:"how-to-run-my-own-script-at-startup-on-qtpc",level:3}],h={toc:d};function m(t){var e=t.components,o=(0,n.Z)(t,i);return(0,a.kt)("wrapper",(0,r.Z)({},h,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null," QTrobot comes with two computers: ",(0,a.kt)("em",{parentName:"p"},"i)")," ",(0,a.kt)("strong",{parentName:"p"},"QTRP"),", a Raspberry Pi based computer to control the main hardware and ",(0,a.kt)("em",{parentName:"p"},"ii)")," ",(0,a.kt)("strong",{parentName:"p"},"QTPC"),", an Intel\xae NUC i5/i7 PC to provide more computational power and to accelerate software development cycle. Both computers run on Ubuntu/Debian Linux operating systems and leverage ROS to offer easy-to-use yet very flexible software architecture. QTrobot's hardware is easily extendable via USB-C and USB adaptors, for example, to connect external monitor, keyboard and mouse and sensors.  "),(0,a.kt)("center",null,(0,a.kt)("img",{src:"/img/processor.svg",alt:"display"})),(0,a.kt)("br",null),"As it is shown in the above diagram, QTRP (in QTrobot's head) is internally connected to QTPC (in QTrobot's body) via ethernet cable. All of the QTrobot devices such as display, speakers, microphone and motors are connected to QTRP except the 3D Camera which is connected directly to QTPC. The Wi-Fi of the QTRP is used to create the QTrobot hotspot with the same SSID as the robot\u2019s serial number (e.g. QTRD000101).",(0,a.kt)("h2",{id:"operating-systems"},"Operating systems"),(0,a.kt)("p",null,"The older versions of QTrobot came with Ubuntu 16. However, we have updated the operating system of both integrated QTrobot\u2019s computers to the latest stable version of Linux.  The Nuc PC (QTPC) comes with ",(0,a.kt)("strong",{parentName:"p"},"Ubuntu 20.04 LTS")," and the Raspberry Pi board (QTRP) at the head uses the latest version of ",(0,a.kt)("strong",{parentName:"p"},"Raspberry Pi OS (Debian Buster)"),". Both computers are updated to latest stable version of ",(0,a.kt)("strong",{parentName:"p"},"ROS Noetic")," with ",(0,a.kt)("strong",{parentName:"p"},"Python 3")," as default. The latest is particularly interesting because its opens accessing wider list of open-source software and libraries which use Python 3 such as recent machine and deep learning libraries, voice processing and recognition software."),(0,a.kt)("h2",{id:"networking"},"Networking"),(0,a.kt)("p",null,"The following diagrams show two configurations of QTrobot's network: ",(0,a.kt)("em",{parentName:"p"},"i)")," QTrobot is offline and its WiFi is configured as hotspot (default configuration) and ",(0,a.kt)("em",{parentName:"p"},"ii)")," QTrobot is connected to the home/office network via its WiFi. By connecting the WiFi of QTRP to the home/office router with the internet, Nuc PC (QTPC) also gets access to the internet.  Moreover, laptops and other devices which are in the same network as the home router, can be easily configured to access and control QTrobot via ROS."),(0,a.kt)("center",null,(0,a.kt)("img",{src:"/img/network_both_new.png"})),(0,a.kt)("br",null),(0,a.kt)("p",null,"There are three system services on QTRP which manage the network setup of QTrobot: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"qt_wlan0_ap"),": setup the QTrobot in hotspot mode when it is running."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"qt_wlan0_client"),": connects the QTrobot to a home/office router when it is configured and running."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"qt_wifi_manager"),": monitors the consistency of QTrobot WiFi setups at boot time and automatically enables the robot's hotspot if there is any issue with internet router connectivity.")),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Important")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("em",{parentName:"li"},"qt_wlan0_ap")," and ",(0,a.kt)("em",{parentName:"li"},"qt_wlan0_client")," services are mutually exclusive. That means that both of them cannot be enabled and run simultaneously.  "),(0,a.kt)("li",{parentName:"ul"},"Please do not modify or disable the ",(0,a.kt)("em",{parentName:"li"},"qt_wifi_manager")," service. This may break the network setup of your QTrobot!")))),(0,a.kt)("h3",{id:"how-to-connect-qtrobot-to-the-internet"},"How to connect QTrobot to the internet"),(0,a.kt)("p",null,"Please follow ",(0,a.kt)("a",{parentName:"p",href:"/docs/intro_code#qt_to_internet"},(0,a.kt)("strong",{parentName:"a"},"Connect QTrobot to a home network and Internet"))," instruction."),(0,a.kt)("h3",{id:"how-to-enable-qtrobots-hotspot"},"How to enable QTrobot's hotspot"),(0,a.kt)("p",null,"QTrobot's hotspot is ",(0,a.kt)("strong",{parentName:"p"},"enabled by default"),". However, if you have connected your robot to the internet and would like to disconnect and enable the hotspot, you can simply follow this instruction: "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1.")," From the Ubuntu desktop of QTPC, open a terminal and access QTRP via ssh:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ssh developer@QTRP\n# password: qtrobot\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2.")," Enable the ",(0,a.kt)("em",{parentName:"p"},"qt_wlan0_ap")," service and disable the ",(0,a.kt)("em",{parentName:"p"},"qt_wlan0_client")," service:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"sudo systemctl disable qt_wlan0_client.service\nsudo systemctl enable qt_wlan0_ap.service\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"3.")," Restart the robot"),(0,a.kt)("h2",{id:"ros-setup"},"ROS setup"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"roscore")," runs on QTRP  automatically at QTrobot boot time. The QTPC is setup with the correct ",(0,a.kt)("inlineCode",{parentName:"p"},"ROS_MASTER_URI")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ROS_IP")," to access the same ROS network as QTRP. ROS master URI is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<your robot serial>:11311")," (for example ",(0,a.kt)("em",{parentName:"p"},"http://QTRD000100:11311"),"). However, you can easily check it by looking into ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/luxai/ros/env.sh")," file on QTRP: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cat /etc/luxai/ros/env.sh\n\n# ...\n# export ROS_HOSTNAME=$(hostname).local\n# export ROS_MASTER_URI=http://$ROS_HOSTNAME:11311\n")),(0,a.kt)("h3",{id:"catkin-workspace"},"Catkin workspace"),(0,a.kt)("p",null,"For both QTRP and QTPC, the Catkin workspace is already set up and is accessible under ",(0,a.kt)("inlineCode",{parentName:"p"},"/home/qtrobot/catkin_ws")," folder.  The workspaces also contains some important ROS nodes for QTrobot interfaces such as ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_nuitrack_app"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_vosk_app")," and etc. Indeed you can use the same catkin workspace for your own developments but be careful to not remove the ",(0,a.kt)("inlineCode",{parentName:"p"},"src")," folder within catkin workspace.  "),(0,a.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"Warning")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},"You do not need and ",(0,a.kt)("strong",{parentName:"li"},"should not")," run another instance of ",(0,a.kt)("inlineCode",{parentName:"li"},"roscore")," neither on QTPC nor QTRP nor any other machine which are in the ROS network of QTrobot. "),(0,a.kt)("li",{parentName:"ul"},"Do ",(0,a.kt)("strong",{parentName:"li"},"not delete")," the default ",(0,a.kt)("inlineCode",{parentName:"li"},"catkin_ws")," folders on QTRP nor on QTPC. These folder already used for running some default QTrobot interface nodes such as ",(0,a.kt)("inlineCode",{parentName:"li"},"qt_nuitrack_app")," on QTPC or ",(0,a.kt)("inlineCode",{parentName:"li"},"qt_vosk_app")," on QTRP.  ")))),(0,a.kt)("h2",{id:"qtrobot-startup-process"},"QTrobot startup process"),(0,a.kt)("p",null,"The following diagram depicts the ",(0,a.kt)("strong",{parentName:"p"},"default process")," of QTrobot's startup. Upon turning on the robot  (either by plugin the power line or by pressing the power button), the QTRP will boot and set up the network for Lan, Wi-Fi hotspot and connecting to the home/office router (if set up). Then it runs the ",(0,a.kt)("inlineCode",{parentName:"p"},"roscore")," and launch the QTrobot interfaces such as ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_motor"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_robot_interface")," and etc. When the basic interfaces is up and running, it then turn on QTPC via wake-on-lan. QTPC then boot up and start the ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_nuitrack_app")," interface. "),(0,a.kt)("center",null,(0,a.kt)(s.Mermaid,{chart:'graph LR\n  A(Power on <br/> QTrobot) --\x3e B(turn on <br/> QTRP);\n  B --\x3e B1("Setup networks<br/>ROS environment")\n  B1 --\x3e C(Run motor, face <br/> and other interfaces)\n  B1 --\x3e D(turn on QTPC <br/> via Wake-On-Lan)\n  D --\x3e E(Run nuitrack interface)\n\n  style A fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style B fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style B1 fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style C fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style D fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style E fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030   ',mdxType:"Mermaid"})),(0,a.kt)("p",null,"Powering off QTrobot almost follows the reverse procedure of powering on. The QTrobot's power button is connected to Raspberry PI and trigs the power off procedure of QTRP. During the shut down process of QTRP, it also sends power off command to QTPC via SSH so that both computers turn off using a single power button. Below is an overview of the power-off process of QTrobot. "),(0,a.kt)("center",null,(0,a.kt)(s.Mermaid,{chart:'graph RL  \n  A(Power off <br/> QTrobot) --\x3e B(start shuting down <br/> QTRP);\n  B --\x3e D(stop motor, face <br/> and other interfaces)\n  B --\x3e C("Shutdown QTPC <br/> via SSH command")   \n  C --\x3e E(Stop nuitrack interface)\n\n  style A fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style B fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style C fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style D fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style E fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030   ',mdxType:"Mermaid"})),(0,a.kt)("h3",{id:"what-are-autostart-scripts"},"What are autostart scripts?"),(0,a.kt)("p",null,"QTrobot uses some startup scripts (i.e. autostart scripts) for both QTPC and QTRP to start and launch its software and drivers at boot time. Autostart scripts are simply some bash scripts which are executed at QTrobot startup time. There are different set of autostart scripts, one for QTRP and the other set for QTPC. Generally, these scripts launch specific ROS nodes on each machine. For example, as it can be inferred from ",(0,a.kt)("a",{parentName:"p",href:"#1-qtrobot-architecture"},"QTrobot Architecture"),", one of the autostart scripts of QTPC is responsible to launch the ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_nuitrack_app")," node which provide ROS interface for Nuitrack skeleton tracking using 3D camera. Therefore, ",(0,a.kt)("strong",{parentName:"p"},"it is very important that you completely understand the purpose of each script")," before disabling or modifying the QTrobot autostart behavior."),(0,a.kt)("p",null,"The autostart scripts are located in ",(0,a.kt)("inlineCode",{parentName:"p"},"~/robot/autostart")," folder under ",(0,a.kt)("inlineCode",{parentName:"p"},"qtrobot")," user. The ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")," script is executed automatically at boot time. The other scripts are launched by ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")," and their output are redirected to the corresponding log files.  "),(0,a.kt)("center",null,(0,a.kt)(s.Mermaid,{chart:'flowchart LR;\n    A("Cron job\nor\nqt_user_autostart service") --\x3e B(autostart_screens.sh);\n    B--\x3eC(start_script_1.sh);\n    B--\x3eD(start_script_2.sh);   \n    B--\x3eE(start_script_3.sh);   \n  style A fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style B fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style C fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style D fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030 \n  style E fill:#f0f0f0,stroke:614b7f,stroke-width:2px,color:#303030   ',mdxType:"Mermaid"})),(0,a.kt)("h3",{id:"qtpc-autostart-scripts"},"QTPC autostart scripts"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")," script on QTPC is responsible for launching the ",(0,a.kt)("inlineCode",{parentName:"p"},"qt_nuitrack_app")," interface and users custom scripts. Here is the list and short descriptions of each autostart script on QTPC: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"start_qt_nuitrack_app.sh")," : launch qt_nuitrack_app node (for skeleton tracking, facial feature, gesture recognition and etc.)")),(0,a.kt)("h3",{id:"how-to-check-the-log-files-of-autostart-scripts"},"How to check the log files of autostart scripts"),(0,a.kt)("p",null,"All programs/ROS nodes which are run by QTrobot autostart scripts redirect their standard output (info/war/error messages) to their corresponding log file. These log files can be found under ",(0,a.kt)("inlineCode",{parentName:"p"},"~/robot/autostart/logs")," folder.  "),(0,a.kt)("h3",{id:"how-to-run-my-own-script-at-startup-on-qtpc"},"How to run my own script at startup on QTPC"),(0,a.kt)("p",null,"For example, to run your custom script on QTPC at the startup, you need to first create a startup script file and call it from ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh"),". Do the following steps: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"[Step 1]")," Create custom startup script"),(0,a.kt)("p",{parentName:"li"},"  open a terminal on QTPC and create a bash script file. Let's name it ",(0,a.kt)("inlineCode",{parentName:"p"},"start_my_script.sh"),"."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano ~/robot/autostart/start_my_script.sh\n")),(0,a.kt)("p",{parentName:"li"},"  with the following example content: "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# !/bin/bash\nsource /home/qtrobot/robot/autostart/qt_robot.inc\n\nSCRIPT_NAME="start_my_script"\nLOG_FILE=$(prepare_logfile "$SCRIPT_NAME")\n\n{\nprepare_ros_environment\nwait_for_ros_node "/rosout" 60\n# ...\n# add your main code here\n/usr/bin/echo "This is my script!"        \n# ...\n} &>> ${LOG_FILE}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"[Step 2]")," Add it to ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")),(0,a.kt)("p",{parentName:"li"},"  Carefully edit the ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh"),":"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nano ~/robot/autostart/autostart_screens.sh\n")),(0,a.kt)("p",{parentName:"li"},"  To add your own script (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"start_my_script.sh"),") you can simply add the following line to the buttom of ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")," right before the ",(0,a.kt)("inlineCode",{parentName:"p"},"} &>> ${LOG_FILE}")," line.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"autostart_screens.sh")," should look like the following:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},'{\nwait_for_network        \n...\n...\nrun_script "start_my_script.sh"\n} &>> ${LOG_FILE}\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"[Step 3]")," Reboot and check\nReboot the QTrobot. After reboot, your script should be executed on startup of QTPC. You can now check the log file of your script: "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"cat ~/robot/austostart/logs/start_my_script.log\n")))))}m.isMDXComponent=!0},11748:function(t,e,o){var r={"./locale":89234,"./locale.js":89234};function n(t){var e=a(t);return o(e)}function a(t){if(!o.o(r,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return r[t]}n.keys=function(){return Object.keys(r)},n.resolve=a,t.exports=n,n.id=11748}}]);